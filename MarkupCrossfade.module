<?php

/**
 * MarkupCrossfade - A module for Processwire that renders full-screen CSS3 cross-faded and animated slide-shows with
 * optional overlay text.
 *
 * Inspired by Mary Lou's articles on CSS3 animation on co-drops.
 *
 * Copyright 2014 Stephen Dickinson, QBox.co.
 */
class MarkupCrossfade extends WireData implements Module
{
    public static function getModuleInfo() {
        return array(
            'title'    => __('Markup Cross-Fade', __FILE__),
            'summary'  => __('Generates CSS3 Key-frame-animated cross fades.', __FILE__),
            'version'  => 100,
            'autoload' => false,
            'author'   => 'Stephen Dickinson, QBox.co',
        );
    }


    /**
     * Retrieves the default parameters for the module's render*() methods.
     *
     * @param null|WireArray Pages representing slides in the slideshow.
     * @return array The default parameters for rendering.
     */
    public static function getParams($pages = null)
    {
        return array(
            'pages'             => $pages,             // WireArray of pages defining the slides of the slideshow.
            'duration_field'    => 'duration',         // Field of the slide page that provides the duration (in seconds)
            'overlay_field'     => 'body',             // Field of the slide page that provides the overlay text
            'image_field'       => 'image',            // Field of the slide page that provides the image (url)
            'title_xform_field' => '',                 // Field of the slide page that provides the title transformations
            'image_xform_field' => '',                 // Field of the slide page that provides the image transformations
            'title_xforms'      => '',                 // Default title transformations - one per line (\n separator please) - leave blank for none.
            'image_xforms'      => '',                 // Default image transformations - one per line (\n separator please) - leave blank for none.
            'html_class'        => 'markup-crossfade', // What class to apply to the owning list
            'z_index'           => '-10',              // z-index of slideshow container and it's spans
            'li_id'             => 'slide_',           // What id to use for each slide. The slide # will be appended to this
            'browsers'          => array(              // Array of browsers extensions to render CSS for
                '',
                '-webkit-',
                '-moz-',
                '-o-',
                '-ms-'
            ),
            'skip_css'          => false,              // true => use your own CSS file.
            'mask_image'        => '',                 // location of mask image. Leave blank if none.
        );
    }


    /**
     * Calculates slide timings.
     *
     * @param array A PHP array containing the parameters to be used in calculating the animation timings.
     * @return array A PHP array containing the calculated animation timings.
     */
    protected static function calcTimings(array $params)
    {
        $params = array_merge(self::getParams(), $params);
        extract($params, EXTR_PREFIX_ALL, 'param');

        $num_slides = $param_pages->getTotal();
        if ($num_slides == 0) {
            throw new \WireException(__('You must define which pages are to be used as slides for the crossfade.', __FILE__));
        }

        $timings = array(
            'total'      => 0,
            'slides'     => array(),
            'html_class' => $param_html_class,
            'li_id'      => $param_li_id,
            'browsers'   => $param_browsers,
            'z_index'    => $param_z_index,
            'skip_css'   => $param_skip_css,
            'mask_image' => $param_mask_image,
        );

        foreach ($param_pages as $zero_index => $slide_page) {
            $images = $slide_page->$param_image_field;
            if (null === $images) {
                $image = '';
            } else if ($images instanceof WireArray) {
                $image = $images->first->url;
            } else {
                $image = $images->url;
            }

            $slide_duration = $slide_page->$param_duration_field;
            $timings['slides'][$zero_index+1]['delay']      = $timings['total'];
            $timings['slides'][$zero_index+1]['url']        = $image;
            $timings['slides'][$zero_index+1]['duration']   = $slide_duration;
            if (null !== $slide_page->$param_title_xform_field) {
                $timings['slides'][$zero_index+1]['ttl_xforms'] = $slide_page->$param_title_xform_field;
            } else {
                $timings['slides'][$zero_index+1]['ttl_xforms'] = $param_title_xforms;
            }
            if (null !== $slide_page->$param_image_xform_field) {
                $timings['slides'][$zero_index+1]['img_xforms'] = $slide_page->$param_image_xform_field;
            } else {
                $timings['slides'][$zero_index+1]['img_xforms'] = $param_image_xforms;
            }
            $timings['total'] += (int) $slide_duration;
        }

        $total = $timings['total'];
        foreach ($timings['slides'] as $i => &$slide) {
            $finish_pc = (int) bcdiv(bcmul("100", $slide['duration'], 2), "$total", 2);
            $half_pc   = (int) bcdiv($finish_pc, "2", 2);
            $done_pc   = $finish_pc + $half_pc;
            if ($done_pc > 100) {
                $done_pc = 100;
            }

            $keyframes_images = array(
                "0%" => 0,
                "$half_pc%" => 1,
                "$finish_pc%" => 1,
                "$done_pc%" => 0,
                "100%" => 0,
            );

            $keyframes_titles = array(
                "0%" => 0,
                "$half_pc%" => 1,
                "$finish_pc%" => 1,
                "$done_pc%" => 0,
                "100%" => 0,
            );

            $slide['keyframes-images'] = $keyframes_images;
            $slide['keyframes-titles'] = $keyframes_titles;
        }

        return $timings;
    }


    /**
     * Renders the CSS used by the slideshow.
     *
     * This will include all the animation keyframes and transformations for both the primary image from each of the
     * slide pages along with overlay text (if any). Additional default CSS will be output as read from the
     * MarkupCrossfade.css file with suitable substitutions made for various parameters. You can either edit the css
     * file directly or use your own from the calling template file. If you choose to use your own, please set the
     * parameter value 'skip_css' => false before generating the CSS and HTML.
     *
     * @param array Parameters.
     * @return string CSS to inject into your output.
     */
    public static function renderCss(array $params)
    {
        $timings    = self::calcTimings($params);
        $total      = $timings['total'];
        $html_class = $timings['html_class'];
        $li_id      = $timings['li_id'];
        $browsers   = $timings['browsers'];
        $skip_css   = $timings['skip_css'];
        $z_index    = $timings['z_index'];
        $mask_image = $timings['mask_image'];

        $static_css = '';
        if (!$skip_css) {
            $static_css_file = dirname(__FILE__).'/MarkupCrossfade.css';
            $static_css = file_get_contents($static_css_file);
            if (false === $static_css) {
                throw new \WireException(__("Could not find file '$static_css_file'", __FILE__));
            }
            $static_css = str_replace('{{html_class}}', $html_class, $static_css);
            $static_css = str_replace('{{z_index}}', $z_index, $static_css);

            $replace = '';
            if (is_string($mask_image) && !empty($mask_image)) {
                $replace = ".$html_class:after {
    content: '';
    background: transparent url($mask_image) repeat top left;
}";
            }
            $static_css = str_replace('{{mask_image}}', $replace, $static_css);
        }
        $css = '';

        $image_frame_cache = array();
        $title_frame_cache = array();

        foreach ($timings['slides'] as $i => $slide) {
            $delay      = $slide['delay'];

            $ttl_xforms = explode("\n", $slide['ttl_xforms']);
            $img_xforms = explode("\n", $slide['img_xforms']);

            $img_kf = '';
            $j = 0;
            foreach ($slide['keyframes-images'] as $pc => $opacity) {

                // Add opacity...
                $x = array("opacity:$opacity");

                // Add easing...
                if (0 === $j) {
                    $x[] = '{browser}animation-timing-function:ease-in';
                } else if (1 === $j) {
                    $x[] = '{browser}animation-timing-function:ease-out';
                }

                // Add image transformations...
                if (isset($img_xforms[$j]) && !empty(trim($img_xforms[$j]))) {
                    $x[] = "transform:{$img_xforms[$j]}";
                }

                // Merge this keyframe...
                $x = '{'.implode("; ", $x).';}';
                $img_kf .= "\t$pc $x\n";
                $j++;
            }

            $ttl_kf = '';
            $j = 0;
            foreach ($slide['keyframes-titles'] as $pc => $opacity) {

                // Add opacity...
                $x = array("opacity:$opacity");

                // Add title transformations...
                if (isset($ttl_xforms[$j]) && !empty(trim($ttl_xforms[$j]))) {
                    $x[] = "transform:{$ttl_xforms[$j]}";
                }

                // Merge this keyframe...
                $x = '{'.implode("; ", $x).';}';
                $ttl_kf .= "\t$pc $x\n";
                $j++;
            }

            $image_kf_key = md5($img_kf);
            $title_kf_key = md5($ttl_kf);
            $image_kf = '';
            $title_kf = '';

            foreach ($browsers as $browser) {
                $tmp_image_kf = str_replace('{browser}', $browser, $img_kf);
                $tmp_title_kf = str_replace('{browser}', $browser, $ttl_kf);

                $image_kf .= "@{$browser}keyframes img_ani_{$i} {\n$tmp_image_kf}\n";
                $title_kf .= "@{$browser}keyframes ttl_ani_{$i} {\n$tmp_title_kf}\n";
            }

            if (!array_key_exists($image_kf_key, $image_frame_cache)) {
                $image_frame_cache[$image_kf_key] = array($i, $image_kf);
                $css .= $image_kf;
            }

            if (!array_key_exists($title_kf_key, $title_frame_cache)) {
                $title_frame_cache[$title_kf_key] = array($i, $title_kf);
                $css .= $title_kf;
            }

            $image_index = $image_frame_cache[$image_kf_key][0];
            $title_index = $title_frame_cache[$title_kf_key][0];
            $css_img = array();
            $css_ttl = array();
            $css_del = array();

            foreach ($browsers as $browser) {
                $css_img[] = "\t{$browser}animation: img_ani_{$image_index} {$total}s linear infinite 0s;";
                $css_ttl[] = "\t{$browser}animation: ttl_ani_{$image_index} {$total}s linear infinite 0s;";
                $css_del[] = "\t{$browser}animation-delay: {$delay}s;";
            }
            $css_img = implode("\n", $css_img);
            $css_ttl = implode("\n", $css_ttl);
            $css_del = implode("\n", $css_del);

            $css .=<<<CSS
.{$html_class} li#{$li_id}{$i} span {
\tbackground-image: url('{$slide['url']}');
$css_img
$css_del
}
.{$html_class} li#{$li_id}{$i} div {
$css_ttl
$css_del
}

CSS;
        }

        return "$static_css\n$css";
    }


    /**
     * Renders the slideshow HTML.
     *
     * @param array Parameters.
     * @return string HTML to inject into your output.
     */
    public static function renderHtml(array $params)
    {
        $params = array_merge(self::getParams(), $params);
        extract($params, EXTR_PREFIX_ALL, 'param');

        $num_slides = $param_pages->getTotal();
        if ($num_slides == 0) {
            throw new \WireException(__('You must define which pages are to be used as slides for the crossfade.', __FILE__));
        }

        $slide_txt = __("Slide", __FILE__);

        $o[] = '<ul class="'.$param_html_class.'">';
        foreach ($param_pages as $zero_index => $slide_page) {
            $i = $zero_index + 1;
            $o[] = "<li id=\"$param_li_id$i\">";
            $o[] = "\t<span>$slide_txt $i</span>";
            $o[] = "\t<div>";
            if ($slide_page->$param_overlay_field) {
                $o[] = "\t\t<h3>{$slide_page->$param_overlay_field}</h3>";
            }
            $o[] = "\t</div>";
            $o[] = '</li>';
        }
        $o[] = '</ul>';
        $o = implode("\n", $o);
        return $o;
    }
}

//eof

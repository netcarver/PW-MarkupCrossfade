<?php

class MarkupCrossfade extends WireData implements Module
{
    public static function getModuleInfo() {
        return array(
            'title'    => __('Markup Cross-Fade', __FILE__),
            'summary'  => __('Generates CSS3 Key-frame-animated cross fades.', __FILE__),
            'version'  => 1,
            'autoload' => false,
            'author'   => 'Stephen Dickinson, QBox.co',
        );
    }


    public function getParams($pages = null)
    {
        return array(
            'pages'          => $pages,             // WireArray of pages defining the slides of the slideshow.
            'duration_field' => 'duration',         // Field of the slide page that provides the duration (in seconds)
            'overlay_field'  => 'body',             // Field of the slide page that provides the overlay text
            'image_field'    => 'image',            // Field of the slide page that provides the image (url)
            'html_class'     => 'markup-crossfade', // What class to apply to the owning list
            'z_index'        => '-10',              // z-index of slideshow container and it's spans
            'li_id'          => 'slide_',           // What id to use for each slide. The slide # will be appended to this
            'browsers'       => array(              // Array of browsers extensions to generate CSS for
                '',
                '-webkit-',
                '-moz-',
                '-o-',
                '-ms-'
            ),
            'skip_css'       => false,              // true => use your own CSS file.
            'mask_image'     => '',                 // location of mask image, if any. Leave blank if none.
        );
    }


    protected static function calcTimings(array $params)
    {
        $params = array_merge(self::getParams(), $params);
        extract($params, EXTR_PREFIX_ALL, 'param');

        $num_panels = $param_pages->getTotal();
        if ($num_panels == 0) {
            throw new \WireException(__('You must define which pages are to be used as slides for the crossfade.', __FILE__));
        }

        $timings = array(
            'total' => 0,
            'panels' => array(
            ),
            'html_class' => $param_html_class,
            'li_id' => $param_li_id,
            'browsers' => $param_browsers,
            'z_index' => $param_z_index,
            'skip_css' => $param_skip_css,
            'mask_image' => $param_mask_image,
        );

        foreach ($param_pages as $z => $p) {
            $images = $p->$param_image_field;
            if (null === $images) {
                $image = '';
            } else if ($images instanceof WireArray) {
                $image = $images->first->url;
            } else {
                $image = $images->url;
            }

            $panel_duration = $p->$param_duration_field;
            $timings['panels'][$z+1]['delay']    = $timings['total'];
            $timings['panels'][$z+1]['url']      = $image;
            $timings['panels'][$z+1]['duration'] = $panel_duration;
            $timings['total'] += (int) $panel_duration;
        }

        $total = $timings['total'];
        foreach ($timings['panels'] as $i => &$info) {
            $finish_pc = (int) bcdiv(bcmul("100", $info['duration'], 2), "$total", 2);
            $half_pc   = (int) bcdiv($finish_pc, "2", 2);
            $done_pc   = $finish_pc + $half_pc;
            if ($done_pc > 100) {
                $done_pc = 100;
            }

            $keyframes_images = array(
                "0%" => 0,
                "$half_pc%" => 1,
                "$finish_pc%" => 1,
                "$done_pc%" => 0,
                "100%" => 0,
            );

            $half_pc += 0;
            $done_pc -= 0;

            $keyframes_titles = array(
                "0%" => 0,
                "$half_pc%" => 1,
                "$finish_pc%" => 1,
                "$done_pc%" => 0,
                "100%" => 0,
            );

            $info['keyframes-images'] = $keyframes_images;
            $info['keyframes-titles'] = $keyframes_titles;
        }

        return $timings;
    }


    public static function generateCss(array $params)
    {
        $times = self::calcTimings($params);
        $total = $times['total'];
        $html_class = $times['html_class'];
        $li_id      = $times['li_id'];
        $browsers   = $times['browsers'];
        $skip_css   = $times['skip_css'];
        $z_index    = $times['z_index'];
        $mask_image = $times['mask_image'];

        $static_css = '';
        if (!$skip_css) {
            $static_css_file = dirname(__FILE__).'/MarkupCrossfade.css';
            $static_css = file_get_contents($static_css_file);
            if (false === $static_css) {
                throw new \WireException(__("Could not find file '$static_css_file'", __FILE__));
            }
            $static_css = str_replace('{{html_class}}', $html_class, $static_css);
            $static_css = str_replace('{{z_index}}', $z_index, $static_css);

            $replace = '';
            if (is_string($mask_image) && !empty($mask_image)) {
                $replace = ".$html_class:after {
    content: '';
    background: transparent url($mask_image) repeat top left;
}";
            }
            $static_css = str_replace('{{mask_image}}', $replace, $static_css);
        }
        $css = '';

        foreach ($times['panels'] as $i => $info) {
            $delay      = $info['delay'];

            $img_kf = '';
            $j = 0;
            foreach ($info['keyframes-images'] as $pc => $opacity) {
                switch ($j) {
                case 0:
                    $ease = ' {browser}animation-timing-function:ease-in;';
                    break;
                case 1:
                    $ease = ' {browser}animation-timing-function:ease-out;';
                    break;
                default:
                    $ease = ' transform: scale(1.1)';
                }

                $img_kf .= "\t$pc {opacity:$opacity;$ease}\n";
                $j++;
            }

            $ttl_kf = '';
            foreach ($info['keyframes-titles'] as $pc => $opacity) {
                $ttl_kf .= "\t$pc {opacity:$opacity}\n";
            }


            $css .=<<<CSS
.{$html_class} li#{$li_id}{$i} span {
\tanimation: imageAnimation{$i} {$total}s linear infinite 0s;
\t-webkit-animation: imageAnimation{$i} {$total}s linear infinite 0s;
\t-moz-animation: imageAnimation{$i} {$total}s linear infinite 0s;
\t-o-animation: imageAnimation{$i} {$total}s linear infinite 0s;
\t-ms-animation: imageAnimation{$i} {$total}s linear infinite 0s;
\tbackground-image: url('{$info['url']}');
\tanimation-delay: {$delay}s;
\t-webkit-animation-delay: {$delay}s;
\t-moz-animation-delay: {$delay}s;
\t-o-animation-delay: {$delay}s;
\t-ms-animation-delay: {$delay}s;
}
.{$html_class} li#{$li_id}{$i} div {
\tanimation: titleAnimation{$i} {$total}s linear infinite 0s;
\t-webkit-animation: titleAnimation{$i} {$total}s linear infinite 0s;
\t-moz-animation: titleAnimation{$i} {$total}s linear infinite 0s;
\t-o-animation: titleAnimation{$i} {$total}s linear infinite 0s;
\t-ms-animation: titleAnimation{$i} {$total}s linear infinite 0s;
\tanimation-delay: {$delay}s;
\t-webkit-animation-delay: {$delay}s;
\t-moz-animation-delay: {$delay}s;
\t-o-animation-delay: {$delay}s;
\t-ms-animation-delay: {$delay}s;
}

CSS;

            foreach ($browsers as $browser) {
                $image_kf = str_replace('{browser}', $browser, $img_kf);
                $title_kf = str_replace('{browser}', $browser, $ttl_kf);

                $css .= "@{$browser}keyframes imageAnimation{$i} {\n$image_kf}\n";
                $css .= "@{$browser}keyframes titleAnimation{$i} {\n$title_kf}\n";
            }
        }

        return "$static_css\n$css";
    }


    function generateHtml(array $params)
    {
        $params = array_merge(self::getParams(), $params);
        extract($params, EXTR_PREFIX_ALL, 'param');

        $num_panels = $param_pages->getTotal();
        if ($num_panels == 0) {
            throw new \WireException(__('You must define which pages are to be used as slides for the crossfade.', __FILE__));
        }

        $o[] = '<ul class="'.$param_html_class.'">';
        foreach ($param_pages as $z => $p) {
            $i = $z + 1;
            $o[] = "<li id=\"$param_li_id$i\">";
            $o[] = "\t<span>Panel $i</span>";
            $o[] = "\t<div>";
            if ($p->$param_overlay_field) {
                $o[] = "\t\t<h3>{$p->$param_overlay_field}</h3>";
            }
            $o[] = "\t</div>";
            $o[] = '</li>';
        }
        $o[] = '</ul>';
        $o = implode("\n", $o);
        return $o;
    }
}

//eof
